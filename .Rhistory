result_to_parse$kind,
result_to_parse$precision,
result_to_parse$AddressDetails$Country$CountryName,
result_to_parse$AddressDetails$Country$AdministrativeArea$AdministrativeAreaName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$LocalityName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$Thoroughfare$ThoroughfareName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$Thoroughfare$Premise$PremiseNumber), function(x) ifelse(is.null(x) == T, NA, x)))
return(found_add)
}
geocode_result <- lapply(search_line, function(x) tryCatch(geo_find(x),
error = function(e) 'error'))
geocode_result <- as.data.frame(do.call(rbind, geocode_result))
colnames(geocode_result) <- c('AddressLine', 'point',	'kind', 'precision', 'Country', 'AdministrativeAreaName',	'LocalityName',	'ThoroughfareName',	'PremiseNumber')
end_time <- Sys.time()
return(geocode_result)
}
res <- yandex_geocode(tambov[1,4], '2ed244eb-29c9-49fa-8508-80a84c1d69b0')
View(res)
yandex_geocode <- function(search_line, apikey, ...) {
start_time <- Sys.time()
require(tidyverse)
require(xml2)
geo_find <- function(geocode, rspn = 0, bbox = NULL, coord_left_low, coord_right_up) {
#Combine a complete url for request
geocode <- paste(unlist(strsplit(geocode, split = " ")), collapse = "+")
if (rspn > 0 & is.null(bbox) == FALSE) {
coord1 <- unlist(strsplit(coord_left_low, split = ", "))
coord1 <- paste(coord1[2], coord1[1], sep = ",")
coord2 <- unlist(strsplit(coord_right_up, split = ", "))
coord2 <- paste(coord2[2], coord2[1], sep = ",")
url <- gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", enc2utf8(geocode), "&rspn=", rspn, "&bbox=", coord1, "~", coord2, collapse = ""))
} else {
url <- gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", enc2utf8(geocode), collapse = ""))
}
result <- as_list(read_xml(url, encoding = 'UTF-8'))
result_to_parse <- result$ymaps$GeoObjectCollection$featureMember$GeoObject$metaDataProperty$GeocoderMetaData
found_add <- unlist(lapply(list(result_to_parse$text,
result[["ymaps"]][["GeoObjectCollection"]][["featureMember"]][["GeoObject"]][["Point"]][["pos"]][[1]],
result_to_parse$kind,
result_to_parse$precision,
result_to_parse$AddressDetails$Country$CountryName,
result_to_parse$AddressDetails$Country$AdministrativeArea$AdministrativeAreaName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$LocalityName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$Thoroughfare$ThoroughfareName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$Thoroughfare$Premise$PremiseNumber), function(x) ifelse(is.null(x) == T, NA, x)))
return(found_add)
}
geocode_result <- lapply(search_line, function(x) tryCatch(geo_find(x),
error = function(e) 'error'))
geocode_result <- as.data.frame(do.call(rbind, geocode_result))
colnames(geocode_result) <- c('AddressLine', 'point',	'kind', 'precision', 'Country', 'AdministrativeAreaName',	'LocalityName',	'ThoroughfareName',	'PremiseNumber')
end_time <- Sys.time()
return(geocode_result)
}
res <- yandex_geocode(tambov[1,4], '2ed244eb-29c9-49fa-8508-80a84c1d69b0')
View(res)
tambov[1,4]
yandex_geocode <- function(search_line, apikey, ...) {
start_time <- Sys.time()
require(tidyverse)
require(xml2)
geo_find <- function(geocode, rspn = 0, bbox = NULL, coord_left_low, coord_right_up) {
#Combine a complete url for request
geocode <- paste(unlist(strsplit(geocode, split = " ")), collapse = "+")
if (rspn > 0 & is.null(bbox) == FALSE) {
coord1 <- unlist(strsplit(coord_left_low, split = ", "))
coord1 <- paste(coord1[2], coord1[1], sep = ",")
coord2 <- unlist(strsplit(coord_right_up, split = ", "))
coord2 <- paste(coord2[2], coord2[1], sep = ",")
url <-enc2utf8(gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", enc2utf8(geocode), "&rspn=", rspn, "&bbox=", coord1, "~", coord2, collapse = "")))
} else {
url <- enc2utf8(gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", enc2utf8(geocode), collapse = "")))
}
result <- as_list(read_xml(url, encoding = 'UTF-8'))
result_to_parse <- result$ymaps$GeoObjectCollection$featureMember$GeoObject$metaDataProperty$GeocoderMetaData
found_add <- unlist(lapply(list(result_to_parse$text,
result[["ymaps"]][["GeoObjectCollection"]][["featureMember"]][["GeoObject"]][["Point"]][["pos"]][[1]],
result_to_parse$kind,
result_to_parse$precision,
result_to_parse$AddressDetails$Country$CountryName,
result_to_parse$AddressDetails$Country$AdministrativeArea$AdministrativeAreaName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$LocalityName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$Thoroughfare$ThoroughfareName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$Thoroughfare$Premise$PremiseNumber), function(x) ifelse(is.null(x) == T, NA, x)))
return(found_add)
}
geocode_result <- lapply(search_line, function(x) tryCatch(geo_find(x),
error = function(e) 'error'))
geocode_result <- as.data.frame(do.call(rbind, geocode_result))
colnames(geocode_result) <- c('AddressLine', 'point',	'kind', 'precision', 'Country', 'AdministrativeAreaName',	'LocalityName',	'ThoroughfareName',	'PremiseNumber')
end_time <- Sys.time()
return(geocode_result)
}
res <- yandex_geocode(tambov[1,4], '2ed244eb-29c9-49fa-8508-80a84c1d69b0')
View(res)
rm(res)
res <- yandex_geocode(tambov[1,4], '2ed244eb-29c9-49fa-8508-80a84c1d69b0')
View(res)
Sys.setlocale("LC_ALL","English")
res <- yandex_geocode(tambov[1,4], '2ed244eb-29c9-49fa-8508-80a84c1d69b0')
View(res)
Sys.setlocale("LC_ALL","Russian")
res <- yandex_geocode(tambov[1,4], '2ed244eb-29c9-49fa-8508-80a84c1d69b0')
View(res)
library(curl)
rm(res)
res <- yandex_geocode(tambov[1,4], '2ed244eb-29c9-49fa-8508-80a84c1d69b0')
View(res)
geocode <- tambov[1,4]
geocode <- paste(unlist(strsplit(geocode, split = " ")), collapse = "+")
url <- enc2utf8(gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", enc2utf8(geocode), collapse = "")))
con <- curl(url = url)
result <- as_list(read_xml(con))
View(result)
install.packages(c("curl", "httr", "tidyr", "urltools", "XML", "xml2"))
res <- yandex_geocode(tambov[1,4], '2ed244eb-29c9-49fa-8508-80a84c1d69b0')
tambov <- read.xlsx('C://Users//Наталья//Documents//GIT//Yandex-geosearch//tamb.xlsx')
library(openxlsx)
tambov <- read.xlsx('C://Users//Наталья//Documents//GIT//Yandex-geosearch//tamb.xlsx')
yandex_geocode <- function(search_line, apikey, ...) {
start_time <- Sys.time()
require(tidyverse)
require(xml2)
geo_find <- function(geocode, rspn = 0, bbox = NULL, coord_left_low, coord_right_up) {
#Combine a complete url for request
geocode <- paste(unlist(strsplit(geocode, split = " ")), collapse = "+")
if (rspn > 0 & is.null(bbox) == FALSE) {
coord1 <- unlist(strsplit(coord_left_low, split = ", "))
coord1 <- paste(coord1[2], coord1[1], sep = ",")
coord2 <- unlist(strsplit(coord_right_up, split = ", "))
coord2 <- paste(coord2[2], coord2[1], sep = ",")
url <-enc2utf8(gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", enc2utf8(geocode), "&rspn=", rspn, "&bbox=", coord1, "~", coord2, collapse = "")))
} else {
url <- enc2utf8(gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", enc2utf8(geocode), collapse = "")))
}
result <- as_list(read_xml(url, encoding = 'UTF-8'))
result_to_parse <- result$ymaps$GeoObjectCollection$featureMember$GeoObject$metaDataProperty$GeocoderMetaData
found_add <- unlist(lapply(list(result_to_parse$text,
result[["ymaps"]][["GeoObjectCollection"]][["featureMember"]][["GeoObject"]][["Point"]][["pos"]][[1]],
result_to_parse$kind,
result_to_parse$precision,
result_to_parse$AddressDetails$Country$CountryName,
result_to_parse$AddressDetails$Country$AdministrativeArea$AdministrativeAreaName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$LocalityName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$Thoroughfare$ThoroughfareName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$Thoroughfare$Premise$PremiseNumber), function(x) ifelse(is.null(x) == T, NA, x)))
return(found_add)
}
geocode_result <- lapply(search_line, function(x) tryCatch(geo_find(x),
error = function(e) 'error'))
geocode_result <- as.data.frame(do.call(rbind, geocode_result))
colnames(geocode_result) <- c('AddressLine', 'point',	'kind', 'precision', 'Country', 'AdministrativeAreaName',	'LocalityName',	'ThoroughfareName',	'PremiseNumber')
end_time <- Sys.time()
return(geocode_result)
}
res <- yandex_geocode(tambov[1, 4], '2ed244eb-29c9-49fa-8508-80a84c1d69b0')
install.packages('xml2')
library(xml2)
res <- yandex_geocode(tambov[1, 4], '2ed244eb-29c9-49fa-8508-80a84c1d69b0')
View(res)
geocode <- tambov[1,4]
url <-enc2utf8(gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", enc2utf8(geocode), "&rspn=", rspn, "&bbox=", coord1, "~", coord2, collapse = "")))
apikey <- ''2ed244eb-29c9-49fa-8508-80a84c1d69b0''
apikey <- '2ed244eb-29c9-49fa-8508-80a84c1d69b0'
url <-enc2utf8(gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", enc2utf8(geocode), "&rspn=", rspn, "&bbox=", coord1, "~", coord2, collapse = "")))
url <- enc2utf8(gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", enc2utf8(geocode), collapse = "")))
result <- as_list(read_xml(url, encoding = 'UTF-8'))
View(result)
result[["ymaps"]][["GeoObjectCollection"]][["metaDataProperty"]][["GeocoderResponseMetaData"]][["request"]][[1]]
options(encoding = "utf-8")
url <- enc2utf8(gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", enc2utf8(geocode), collapse = "")))
result <- as_list(read_xml(url, encoding = 'UTF-8'))
View(res)
url
Encoding(url)
geocode <- tambov[1,4]
url <- gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", geocode, collapse = ""))
Encoding(url)
result <- as_list(read_xml(url))
View(result)
curl
curl::curl
library(curl)
install.packages('curl')
library(curl)
curl::curl
curl_connection
body(curl::curl)
yandex_geocode <- function(search_line, apikey, ...) {
start_time <- Sys.time()
require(tidyverse)
require(xml2)
geo_find <- function(geocode, rspn = 0, bbox = NULL, coord_left_low, coord_right_up) {
#Combine a complete url for request
geocode <- paste(unlist(strsplit(geocode, split = " ")), collapse = "+")
if (rspn > 0 & is.null(bbox) == FALSE) {
coord1 <- unlist(strsplit(coord_left_low, split = ", "))
coord1 <- paste(coord1[2], coord1[1], sep = ",")
coord2 <- unlist(strsplit(coord_right_up, split = ", "))
coord2 <- paste(coord2[2], coord2[1], sep = ",")
url <-enc2utf8(gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", enc2utf8(geocode), "&rspn=", rspn, "&bbox=", coord1, "~", coord2, collapse = "")))
} else {
url <- enc2utf8(gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", enc2utf8(geocode), collapse = "")))
}
result <- as_list(read_xml(url, encoding = 'UTF-8'))
result_to_parse <- result$ymaps$GeoObjectCollection$featureMember$GeoObject$metaDataProperty$GeocoderMetaData
found_add <- unlist(lapply(list(result_to_parse$text,
result[["ymaps"]][["GeoObjectCollection"]][["featureMember"]][["GeoObject"]][["Point"]][["pos"]][[1]],
result_to_parse$kind,
result_to_parse$precision,
result_to_parse$AddressDetails$Country$CountryName,
result_to_parse$AddressDetails$Country$AdministrativeArea$AdministrativeAreaName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$LocalityName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$Thoroughfare$ThoroughfareName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$Thoroughfare$Premise$PremiseNumber), function(x) ifelse(is.null(x) == T, NA, x)))
return(found_add)
}
geocode_result <- lapply(search_line, function(x) tryCatch(geo_find(x),
error = function(e) 'error'))
geocode_result <- as.data.frame(do.call(rbind, geocode_result))
colnames(geocode_result) <- c('AddressLine', 'point',	'kind', 'precision', 'Country', 'AdministrativeAreaName',	'LocalityName',	'ThoroughfareName',	'PremiseNumber')
end_time <- Sys.time()
return(geocode_result)
}
apikey <- '2ed244eb-29c9-49fa-8508-80a84c1d69b0'
tambov <- read.xlsx('C://Users//Наталья//Documents//GIT//Yandex-geosearch//tamb.xlsx')
library(openxlsx)
tambov <- read.xlsx('C://Users//Наталья//Documents//GIT//Yandex-geosearch//tamb.xlsx')
res <- yandex_geocode(tambov[2,4],apikey)
View(res)
geocode <- "Москва, Херсонская, 4"
url <- gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", enc2utf8(geocode), collapse = ""))
res <- yandex_geocode(geocode, apikey)
View(res)
rm(res)
Encoding(geocode)
Encoding(geocode) <- "UTF-8"
Encoding(geocode)
geocode <- "Москва, Херсонская, 4"
geocode <- enc2utf8(geocode)
Encoding(geocode)
url <- gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", enc2utf8(geocode), collapse = ""))
Encoding(url)
res <- yandex_geocode(geocode, apikey)
View(res)
sessionInfo()
result <- as_list(read_xml(url, encoding = 'WINDOWS-1252'))
result <- as_list(read_xml(url, encoding = 'WINDOWS-1252'))
setwd("~/GIT/Combined-app")
setwd('C://Users//Наталья//Documents//GIT//Combined-app')
y <- '58.622468, 31.406503'
z <- '58.461637, 31.118112'
make_grid <- function(ru, ld) {
coord1 <- as.numeric(unlist(strsplit(trimws(ru), split = ",")))
coord2 <- as.numeric(unlist(strsplit(trimws(ld), split = ",")))
s1 <- seq(from = coord2[1], to = coord1[1], length.out = 6)
s2 <- seq(from = coord2[2], to = coord1[2], length.out = 6)
ss <- expand.grid(s1, s2)
ss <- ss %>%
unite(col = coords, Var1, Var2, sep = ", ") %>%
mutate(n = rep(1:(length(s1)), length(s1)))
coords <- matrix(nrow = 5, ncol = 5)
for(i in 1:max(ss[, 2])) {
if (i + 1 < max(ss[, 2]) + 1) {
lcv <- ss[which(ss[, 2] == i), 1]
lcv <- lcv[-length(lcv)]
rcv <- ss[which(ss[, 2] == (i + 1)), 1]
rcv <- rcv[-1]
n <- i
coords[, i] <- paste(lcv, rcv, sep = "_")
}
}
return(coords)
}
make_grid(y, z)
library(tidyverse)
make_grid(y, z)
height <- 3
width <- 2
make_grid <- function(ru, ld, height, width) {
coord1 <- as.numeric(unlist(strsplit(trimws(ru), split = ",")))
coord2 <- as.numeric(unlist(strsplit(trimws(ld), split = ",")))
s1 <- seq(from = coord2[1], to = coord1[1], length.out = height + 1)
s2 <- seq(from = coord2[2], to = coord1[2], length.out = width + 1)
ss <- expand.grid(s1, s2)
ss <- ss %>%
unite(col = coords, Var1, Var2, sep = ", ") %>%
mutate(n = rep(1:(length(s1)), length(s1)))
coords <- matrix(nrow = width, ncol = height)
for(i in 1:max(ss[, 2])) {
if (i + 1 < max(ss[, 2]) + 1) {
lcv <- ss[which(ss[, 2] == i), 1]
lcv <- lcv[-length(lcv)]
rcv <- ss[which(ss[, 2] == (i + 1)), 1]
rcv <- rcv[-1]
n <- i
coords[, i] <- paste(lcv, rcv, sep = "_")
}
}
return(coords)
}
make_grid(y, z, height, width)
ru <- '58.622468, 31.406503'
ld <- '58.461637, 31.118112'
rm(y)
rm(z)
coord1 <- as.numeric(unlist(strsplit(trimws(ru), split = ",")))
coord2 <- as.numeric(unlist(strsplit(trimws(ld), split = ",")))
s1 <- seq(from = coord2[1], to = coord1[1], length.out = height + 1)
s2 <- seq(from = coord2[2], to = coord1[2], length.out = width + 1)
s1
s2
ss <- expand.grid(s1, s2)
ss
ss <- ss %>%
unite(col = coords, Var1, Var2, sep = ", ")
ss
ss %>%
unite(col = coords, Var1, Var2, sep = ", ") %>%
mutate(n = rep(1:(length(s1)), width))
ss %>% mutate(n = rep(1:(length(s1)), width))
ss %>% mutate(n = rep(1:(length(s1)), length(s2)))
make_grid <- function(ru, ld, height, width) {
coord1 <- as.numeric(unlist(strsplit(trimws(ru), split = ",")))
coord2 <- as.numeric(unlist(strsplit(trimws(ld), split = ",")))
s1 <- seq(from = coord2[1], to = coord1[1], length.out = height + 1)
s2 <- seq(from = coord2[2], to = coord1[2], length.out = width + 1)
ss <- expand.grid(s1, s2)
ss <- ss %>%
unite(col = coords, Var1, Var2, sep = ", ") %>%
mutate(n = rep(1:(length(s1)), length(s2)))
coords <- matrix(nrow = width, ncol = height)
for(i in 1:max(ss[, 2])) {
if (i + 1 < max(ss[, 2]) + 1) {
lcv <- ss[which(ss[, 2] == i), 1]
lcv <- lcv[-length(lcv)]
rcv <- ss[which(ss[, 2] == (i + 1)), 1]
rcv <- rcv[-1]
n <- i
coords[, i] <- paste(lcv, rcv, sep = "_")
}
}
return(coords)
}
make_grid(ru, ld, height, width)
x <- 'АЗС'
apikey <- '3d382e5a-4cbd-4f19-86e0-112a084057a9'
coords <- make_grid(ru, ld, height, width)
yandex_geosearch_bb <- function(x, coords, apikey, export = F) {
require(jsonlite)
require(openxlsx)
coords <- unlist(strsplit(trimws(coords), split = "_"))
#First, prepare request phrase and convert coordinates from 'lat, lon' into 'lon, lat' format
request <- URLencode(enc2utf8(x))
coord1 <- unlist(strsplit(trimws(coords[1]), split = ","))
coord1 <- paste(coord1[2], coord1[1], sep = ",")
coord2 <- unlist(strsplit(trimws(coords[2]), split = ","))
coord2 <- paste(coord2[2], coord2[1], sep = ",")
#Combine a complete url for request
first_part <- "https://search-maps.yandex.ru/v1/?apikey="
url_compl <- gsub(" ", "", paste(first_part, apikey, "&text=", request, "&type=biz&lang=ru_RU&", "bbox=", coord1, "~", coord2, "&results=500", collapse = ""))
#Obtain a request results in json format
full_req <- suppressWarnings(fromJSON(paste(readLines(url_compl, encoding = 'UTF-8'), collapse="")))
#Desired results are stored in element, called 'feautures'. Here we take from there only name, address, url and coordinates of an object
req_data <- full_req$features
if (length(req_data) < 1) {
return('Nothing to show')
}
prop <- req_data$properties
geo <- req_data$geometry
vec_geo <- unlist(geo$coordinates)
geo_df <- data.frame(lat = vec_geo[seq(2,length(vec_geo), by = 2)], lon = vec_geo[seq(1,length(vec_geo), by = 2)])
#Combine our vectors in a dataframe and save it as csv if 'export' argument was set to 'TRUE'
total <- cbind(prop$name, prop$description, ifelse(is.null(prop$CompanyMetaData$url) == TRUE, rep(NA, length(prop$name)), prop$CompanyMetaData$url), geo_df)
colnames(total) <- c("Name", "Address", "URL", "Lat", "Lon")
if (export == TRUE) {
write.xlsx(total, 'request_api_result.xlsx')
}
return(total)
}
yandex_geosearch_bb(x, coords = coords[1,1], apikey)
z <- array(1:24, dim = 2:4)
zseq <- apply(z, 1:2, function(x) seq_len(max(x)))
z
zseq
coords <- matrix(coords, ncol = 1)
coords
ru <- '58.622468, 31.406503'
ld <- '58.461637, 31.118112'
height <- 3
width <- 2
make_grid <- function(ru, ld, height, width) {
coord1 <- as.numeric(unlist(strsplit(trimws(ru), split = ",")))
coord2 <- as.numeric(unlist(strsplit(trimws(ld), split = ",")))
s1 <- seq(from = coord2[1], to = coord1[1], length.out = height + 1)
s2 <- seq(from = coord2[2], to = coord1[2], length.out = width + 1)
ss <- expand.grid(s1, s2)
ss <- ss %>%
unite(col = coords, Var1, Var2, sep = ", ") %>%
mutate(n = rep(1:(length(s1)), length(s2)))
coords <- matrix(nrow = width * height, ncol = 1)
for(i in 1:max(ss[, 2])) {
if (i + 1 < max(ss[, 2]) + 1) {
lcv <- ss[which(ss[, 2] == i), 1]
lcv <- lcv[-length(lcv)]
rcv <- ss[which(ss[, 2] == (i + 1)), 1]
rcv <- rcv[-1]
n <- i
coords[, i] <- paste(lcv, rcv, sep = "_")
}
}
return(coords)
}
make_grid(ru, ld, height, width)
make_grid <- function(ru, ld, height, width) {
coord1 <- as.numeric(unlist(strsplit(trimws(ru), split = ",")))
coord2 <- as.numeric(unlist(strsplit(trimws(ld), split = ",")))
s1 <- seq(from = coord2[1], to = coord1[1], length.out = height + 1)
s2 <- seq(from = coord2[2], to = coord1[2], length.out = width + 1)
ss <- expand.grid(s1, s2)
ss <- ss %>%
unite(col = coords, Var1, Var2, sep = ", ") %>%
mutate(n = rep(1:(length(s1)), length(s2)))
coords <- matrix(nrow = width, ncol = height)
for(i in 1:max(ss[, 2])) {
if (i + 1 < max(ss[, 2]) + 1) {
lcv <- ss[which(ss[, 2] == i), 1]
lcv <- lcv[-length(lcv)]
rcv <- ss[which(ss[, 2] == (i + 1)), 1]
rcv <- rcv[-1]
n <- i
coords[, i] <- paste(lcv, rcv, sep = "_")
}
}
return(coords)
}
make_grid(ru, ld, height, width)
make_grid <- function(ru, ld, height, width) {
coord1 <- as.numeric(unlist(strsplit(trimws(ru), split = ",")))
coord2 <- as.numeric(unlist(strsplit(trimws(ld), split = ",")))
s1 <- seq(from = coord2[1], to = coord1[1], length.out = height + 1)
s2 <- seq(from = coord2[2], to = coord1[2], length.out = width + 1)
ss <- expand.grid(s1, s2)
ss <- ss %>%
unite(col = coords, Var1, Var2, sep = ", ") %>%
mutate(n = rep(1:(length(s1)), length(s2)))
coords <- matrix(nrow = width, ncol = height)
for(i in 1:max(ss[, 2])) {
if (i + 1 < max(ss[, 2]) + 1) {
lcv <- ss[which(ss[, 2] == i), 1]
lcv <- lcv[-length(lcv)]
rcv <- ss[which(ss[, 2] == (i + 1)), 1]
rcv <- rcv[-1]
n <- i
coords[, i] <- paste(lcv, rcv, sep = "_")
}
}
coords <- matrix(coords, ncol = 1)
return(coords)
}
make_grid(ru, ld, height, width)
x <- 'АЗС'
apikey <- '3d382e5a-4cbd-4f19-86e0-112a084057a9'
coords <- make_grid(ru, ld, height, width)
yandex_geosearch_bb <- function(x, coords, apikey, export = F) {
require(jsonlite)
require(openxlsx)
coords <- unlist(strsplit(trimws(coords), split = "_"))
#First, prepare request phrase and convert coordinates from 'lat, lon' into 'lon, lat' format
request <- URLencode(enc2utf8(x))
coord1 <- unlist(strsplit(trimws(coords[1]), split = ","))
coord1 <- paste(coord1[2], coord1[1], sep = ",")
coord2 <- unlist(strsplit(trimws(coords[2]), split = ","))
coord2 <- paste(coord2[2], coord2[1], sep = ",")
#Combine a complete url for request
first_part <- "https://search-maps.yandex.ru/v1/?apikey="
url_compl <- gsub(" ", "", paste(first_part, apikey, "&text=", request, "&type=biz&lang=ru_RU&", "bbox=", coord1, "~", coord2, "&results=500", collapse = ""))
#Obtain a request results in json format
full_req <- suppressWarnings(fromJSON(paste(readLines(url_compl, encoding = 'UTF-8'), collapse="")))
#Desired results are stored in element, called 'feautures'. Here we take from there only name, address, url and coordinates of an object
req_data <- full_req$features
if (length(req_data) < 1) {
return('Nothing to show')
}
prop <- req_data$properties
geo <- req_data$geometry
vec_geo <- unlist(geo$coordinates)
geo_df <- data.frame(lat = vec_geo[seq(2,length(vec_geo), by = 2)], lon = vec_geo[seq(1,length(vec_geo), by = 2)])
#Combine our vectors in a dataframe and save it as csv if 'export' argument was set to 'TRUE'
total <- cbind(prop$name, prop$description, ifelse(is.null(prop$CompanyMetaData$url) == TRUE, rep(NA, length(prop$name)), prop$CompanyMetaData$url), geo_df)
colnames(total) <- c("Name", "Address", "URL", "Lat", "Lon")
if (export == TRUE) {
write.xlsx(total, 'request_api_result.xlsx')
}
return(total)
}
result <- lapply(coords, function(c) yandex_geosearch_bb(x = 'АЗС', apikey = apikey, export = F))
result <- lapply(coords, function(coords) yandex_geosearch_bb(x = 'АЗС', apikey = apikey, export = F))
coords[1]
result <- list()
for (i in 1:length(coords)) {
result[i] <- yandex_geosearch_bb(x, coords[i], apikey)
}
View(result)
result[[6]]
yandex_geosearch_bb(x, coords[2], apikey)
result <- data.frame()
for (i in 1:length(coords)) {
res <- yandex_geosearch_bb(x, coords[i], apikey)
result <- rbind(result, res)
}
View(result)
