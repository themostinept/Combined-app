get_car <- priceOld - priceNew
while (get_car < 0) {
if (round(month / 2) == month / 2) {
loss <- loss + 0.5
}
priceNew <- priceNew * ((100 - loss) / 100)
priceOld <- priceOld * ((100 - loss) / 100)
if (month < 1) {
saving_tot <- saving
} else {
saving_tot <- saving_tot + saving
}
get_car <- (priceOld + saving_tot) - priceNew
month <- month + 1
print(get_car, month)
}
month <- 0
get_car <- priceOld - priceNew
while (get_car < 0) {
month <- month + 1
if (round(month / 2) == month / 2) {
loss <- loss + 0.5
}
priceNew <- priceNew * ((100 - loss) / 100)
priceOld <- priceOld * ((100 - loss) / 100)
if (month < 1) {
saving_tot <- saving
} else {
saving_tot <- saving_tot + saving
}
get_car <- (priceOld + saving_tot) - priceNew
print(get_car, month)
}
rm(saving_tot)
month <- 0
get_car <- priceOld - priceNew
while (get_car < 0) {
month <- month + 1
if (round(month / 2) == month / 2) {
loss <- loss + 0.5
}
priceNew <- priceNew * ((100 - loss) / 100)
priceOld <- priceOld * ((100 - loss) / 100)
if (month < 1) {
saving_tot <- saving
} else {
saving_tot <- saving_tot + saving
}
get_car <- (priceOld + saving_tot) - priceNew
print(get_car, month)
}
month <- 0
get_car <- priceOld - priceNew
while (get_car < 0) {
month <- month + 1
if (round(month / 2) == month / 2) {
loss <- loss + 0.5
}
priceNew <- priceNew * ((100 - loss) / 100)
priceOld <- priceOld * ((100 - loss) / 100)
if (month == 1) {
saving_tot <- saving
} else {
saving_tot <- saving_tot + saving
}
get_car <- (priceOld + saving_tot) - priceNew
print(get_car, month)
}
month <- 0
get_car <- priceOld - priceNew
loss <- 1.5
riceOld <- 2000
priceNew <- 8000
saving <- 1000
rm(saving_tot)
rm(riceOld)
priceOld <- 2000
month <- month + 1
if (round(month / 2) == month / 2) {
loss <- loss + 0.5
}
priceNew <- priceNew * ((100 - loss) / 100)
priceOld <- priceOld * ((100 - loss) / 100)
if (month == 1) {
saving_tot <- saving
} else {
saving_tot <- saving_tot + saving
}
get_car <- (priceOld + saving_tot) - priceNew
rm(saving_tot)
priceOld <- 2000
priceNew <- 8000
saving <- 1000
loss <- 1.5
month <- 0
get_car <- priceOld - priceNew
while (get_car < 0) {
month <- month + 1
if (round(month / 2) == month / 2) {
loss <- loss + 0.5
}
priceNew <- priceNew * ((100 - loss) / 100)
priceOld <- priceOld * ((100 - loss) / 100)
if (month == 1) {
saving_tot <- saving
} else {
saving_tot <- saving_tot + saving
}
get_car <- (priceOld + saving_tot) - priceNew
print(get_car, month)
}
rm(saving_tot)
priceOld <- 12000
priceNew <- 8000
saving <- 1000
loss <- 1.5
month <- 0
get_car <- priceOld - priceNew
priceOld <- 8000
priceNew <- 12000
saving <- 500
loss <- 1
month <- 0
get_car <- priceOld - priceNew
while (get_car < 0) {
month <- month + 1
if (round(month / 2) == month / 2) {
loss <- loss + 0.5
}
priceNew <- priceNew * ((100 - loss) / 100)
priceOld <- priceOld * ((100 - loss) / 100)
if (month == 1) {
saving_tot <- saving
} else {
saving_tot <- saving_tot + saving
}
get_car <- (priceOld + saving_tot) - priceNew
print(get_car, month)
}
priceOld <- 8000
priceNew <- 12000
saving <- 500
loss <- 1
nbMonths <- function(priceOld, priceNew, saving, loss) {
month <- 0
get_car <- priceOld - priceNew
while (get_car < 0) {
month <- month + 1
if (round(month / 2) == month / 2) {
loss <- loss + 0.5
}
priceNew <- priceNew * ((100 - loss) / 100)
priceOld <- priceOld * ((100 - loss) / 100)
if (month == 1) {
saving_tot <- saving
} else {
saving_tot <- saving_tot + saving
}
get_car <- (priceOld + saving_tot) - priceNew
}
return(c(month, round(get_car)))
}
rm(get_car)
rm(saving_tot)
nbMonths()
nbMonths(priceOld, priceNew, saving, loss)
priceOld <- 2000
priceNew <- 8000
saving <- 1000
loss <- 1.5
nbMonths(priceOld, priceNew, saving, loss)
nbMonths <- function(priceOld, priceNew, saving, loss) {
month <- 0
get_car <- priceOld - priceNew
while (get_car < 0) {
month <- month + 1
if (round(month / 2) == month / 2) {
loss <- loss + 0.5
}
priceNew <- priceNew * ((100 - loss) / 100)
priceOld <- priceOld * ((100 - loss) / 100)
if (month == 1) {
saving_tot <- saving
} else {
saving_tot <- saving_tot + saving
}
get_car <- (priceOld + saving_tot) - priceNew
}
cat("(",month,", " round(get_car), ")")
}
nbMonths <- function(priceOld, priceNew, saving, loss) {
month <- 0
get_car <- priceOld - priceNew
while (get_car < 0) {
month <- month + 1
if (round(month / 2) == month / 2) {
loss <- loss + 0.5
}
priceNew <- priceNew * ((100 - loss) / 100)
priceOld <- priceOld * ((100 - loss) / 100)
if (month == 1) {
saving_tot <- saving
} else {
saving_tot <- saving_tot + saving
}
get_car <- (priceOld + saving_tot) - priceNew
}
cat('(',month,', ', round(get_car), ')')
}
nbMonths(priceOld, priceNew, saving, loss)
nbMonths <- function(priceOld, priceNew, saving, loss) {
month <- 0
get_car <- priceOld - priceNew
while (get_car < 0) {
month <- month + 1
if (round(month / 2) == month / 2) {
loss <- loss + 0.5
}
priceNew <- priceNew * ((100 - loss) / 100)
priceOld <- priceOld * ((100 - loss) / 100)
if (month == 1) {
saving_tot <- saving
} else {
saving_tot <- saving_tot + saving
}
get_car <- (priceOld + saving_tot) - priceNew
}
cat('(',month,', ', round(get_car), ')', sep = "")
}
nbMonths(priceOld, priceNew, saving, loss)
yandex_geocode <- function(search_line, apikey, ...) {
start_time <- Sys.time()
require(tidyverse)
require(xml2)
require(curl)
geo_find <- function(geocode, rspn = 0, bbox = NULL, coord_left_low, coord_right_up) {
#Combine a complete url for request
geocode <- paste(unlist(strsplit(geocode, split = " ")), collapse = "+")
if (rspn > 0 & is.null(bbox) == FALSE) {
coord1 <- unlist(strsplit(coord_left_low, split = ", "))
coord1 <- paste(coord1[2], coord1[1], sep = ",")
coord2 <- unlist(strsplit(coord_right_up, split = ", "))
coord2 <- paste(coord2[2], coord2[1], sep = ",")
url <- gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", curl_escape(iconv(geocode,"UTF-8")), "&rspn=", rspn, "&bbox=", coord1, "~", coord2, collapse = ""))
} else {
url <- gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", curl_escape(iconv(geocode,"UTF-8")), collapse = ""))
}
result <- as_list(read_xml(url))
result_to_parse <- result$ymaps$GeoObjectCollection$featureMember$GeoObject$metaDataProperty$GeocoderMetaData
found_add <- unlist(lapply(list(result_to_parse$text,
result[["ymaps"]][["GeoObjectCollection"]][["featureMember"]][["GeoObject"]][["Point"]][["pos"]][[1]],
result_to_parse$kind,
result_to_parse$precision,
result_to_parse$AddressDetails$Country$CountryName,
result_to_parse$AddressDetails$Country$AdministrativeArea$AdministrativeAreaName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$LocalityName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$Thoroughfare$ThoroughfareName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$Thoroughfare$Premise$PremiseNumber), function(x) ifelse(is.null(x) == T, NA, x)))
return(found_add)
}
geocode_result <- lapply(search_line, function(x) tryCatch(geo_find(x),
error = function(e) 'error'))
geocode_result <- as.data.frame(do.call(rbind, geocode_result))
colnames(geocode_result) <- c('AddressLine', 'point',	'kind', 'precision', 'Country', 'AdministrativeAreaName',	'LocalityName',	'ThoroughfareName',	'PremiseNumber')
end_time <- Sys.time()
return(geocode_result)
print(end_time - start_time)
}
setwd("C:/Users/User/Desktop")
apikey <- '2ed244eb-29c9-49fa-8508-80a84c1d69b0'
library(openxlsx)
br <- read.xlsx('Книга1.xlsx')
res <- yandex_geocode(br$address, apikey)
read.xlsx(res, 'result.xlsx')
write.xlsx(res, 'result.xlsx')
br <- read.xlsx('Книга1.xlsx')
res <- yandex_geocode(br$Адрес, apikey)
write.xlsx(res, 'result.xlsx')
br <- read.xlsx('Книга1.xlsx')
res <- yandex_geocode(br$Адрес, apikey)
write.xlsx(res, 'result.xlsx')
br <- read.xlsx('Книга1.xlsx')
res <- yandex_geocode(br$Адрес, apikey)
write.xlsx(res, 'result.xlsx')
br <- read.xlsx('Книга1.xlsx')
res <- yandex_geocode(br$Адрес, apikey)
write.xlsx(res, 'result.xlsx')
br <- read.xlsx('Книга1.xlsx')
res <- yandex_geocode(br$Адрес, apikey)
write.xlsx(res, 'result.xlsx')
br <- read.xlsx('Книга1.xlsx')
res <- yandex_geocode(br$Адрес, apikey)
write.xlsx(res, 'result.xlsx')
setwd("C:/Users/User/Desktop/R/My_R")
search_vm <- function(old_clust, new_clust, our_tbl, write_total = F){
require(jsonlite)
require(tidyverse)
require(openxlsx)
old_cluster <- fromJSON(old_clust)
old_cluster <- old_cluster$data
old_cluster$type <- 'old'
new_cluster <- fromJSON(new_clust)
new_cluster <- new_cluster$data
new_cluster$type <- 'new'
server_table <- read.xlsx(our_tbl)
server_table <- filter(server_table,is.na(Сервер)==F)
server_table$Сервер <- gsub("'", "", server_table$Сервер) %>% trimws()
server_table$name <- str_extract(server_table$Сервер, "\\(+[:print:]+\\)") %>% str_remove("\\(") %>% str_remove("\\)") %>% trimws(which = 'both')
server_table$vm_node <- sapply(server_table$Сервер, function(x) tail(unlist(strsplit(x, "\\s")), 1))
all_clusters <- bind_rows(new_cluster, old_cluster)
comparing_tbl <- left_join(server_table, all_clusters, by = 'name')
if(write_total == T){write.xlsx(comparing_tbl)} else{
}
result <- comparing_tbl[] %>%
filter(is.na(vmid) == T) %>%
select(c('Сервер', 'vm_node', 'type'))
print(result)
cat("In our table, but not in json files:", nrow(result))
all_clusters_rsoo <- all_clusters %>%
filter(pool %in% 'rsoo')
check_result <- anti_join(all_clusters_rsoo, server_table, by = 'name') %>%
select(c('name', 'vmid', 'node', 'status', 'type'))
print(check_result)
cat("VM in rsoo pool, but not in our table: ", nrow(check_result))
all_clusters_no_pool <- all_clusters %>%
filter(is.na(pool) == T)
main <- str_detect(all_clusters_no_pool$name, 'main')
second <- str_detect(all_clusters_no_pool$name, 'second')
rsoo <- str_detect(all_clusters_no_pool$name, 'rsoo')
main_check <- all_clusters_no_pool[(main == T & is.na(main) == F),]
second_check <- all_clusters_no_pool[(second == T & is.na(second) == F),]
rsoo_check <- all_clusters_no_pool[(rsoo == T & is.na(rsoo) == F),]
check_result_2 <- bind_rows(main_check, second_check, rsoo_check)
check_result_2 <- anti_join(check_result_2, server_table, by = 'name') %>%
select(c('name', 'vmid', 'node', 'status', 'type'))
print(check_result_2)
cat("Probably our VM, but not in rsoo pool: ", nrow(check_result_2))
}
search_vm(old_clust = 'old_cluster.json', new_clust = 'new_cluster.json', our_tbl = 'RSOO_Сервер.xlsx')
load("C:/Users/User/Desktop/git_rep/My_rep/Usefull-datatools/gosjkh.ru/html_table_advanced.RData")
##Вывод информации об общей площади и числе домов региона, отраженных в базе
print(info_text)
houses_nodes <- html_nodes(houses_site, '.list-unstyled a')
houses_attr <- combine(html_attrs(houses_nodes))
all_links <- paste('http://gosjkh.ru', houses_attr, sep = "")
#Последовательно проходим по каждой ссылке из получившегося списка
function_result <- lapply(all_links, function(x) {
page <- read_html(x)
info_text_2 <- page %>% html_nodes('.shadow-effect-2') %>% html_text(trim = T)
##Вывод информации об общей площади и числе домов конкретного города, отраженных в базе
print(info_text_2)
last_page_nod <- page %>% html_nodes("ul")
##В завсмости от того, сколько страниц занимает список домов в городе (одну или больше), сразу скачиваем таблицу,
##или создаем еще один список, где будут содержаться ссылки на все подстраницы
if (length(xml_children(last_page_nod[[length(last_page_nod)]])) < 1) {
city_node <- html_nodes(page, 'body > div.wrapper > div.container.content')
city_node <- xml_find_first(city_node, './/table')
##Здесь задействуется функция 'html_table' из файла 'html_table_advanced'
city_data <- html_table(city_node, header = T, col_classes = list(`1`='integer',
`2`='character',
`3`='character',
`4`='character',
`5`='character',
`6`='character',
`7`='character'))[[1]]
return(city_data)
} else {
last_page <- xml_attrs(xml_child(xml_child(last_page_nod[[length(last_page_nod)]], length(xml_children(last_page_nod[[length(last_page_nod)]]))), 1)) %>%
str_split('=') %>% unlist()
city <- paste(x, "?page=", sep = "")
pages_num <- seq(1,as.numeric(last_page[2]))
city_pages <- paste(city, pages_num, sep = "")
city_data <- lapply(city_pages, . %>%
read_html %>%
html_nodes('body > div.wrapper > div.container.content') %>%
xml_find_first('.//table') %>%
html_table(header = T, col_classes=list(`1`='integer',`2`='character',`3`='character',`4`='character',`5`='character',`6`='character',`7`='character')))
##Объединяем собранные из нескольких подстраниц списки в один датафрейм
city_data <- do.call(bind_rows, city_data)
return(city_data)
}
})
#Объединяем результат выполнения функции в один датафрейм
#и сохраняем его как глобальную переменную для последующего анализа + записываем в xlsx
out <<- as.data.frame(do.call(rbind,function_result))
write.xlsx(out,'Гос ЖКХ.xlsx')
}
gosjkh <- function(houses) {
require(rvest)
require(openxlsx)
require(tidyverse)
#Читаем главную страницу, собираем список всех ссылок,
#ведущих на страницы отдельных городов региона, где содержится информация о находящися в них МКД
houses_site <- read_html(houses)
info_nod <- html_nodes(houses_site, '.shadow-effect-2')
info_text <- html_text(info_nod, trim = T)
##Вывод информации об общей площади и числе домов региона, отраженных в базе
print(info_text)
houses_nodes <- html_nodes(houses_site, '.list-unstyled a')
houses_attr <- combine(html_attrs(houses_nodes))
all_links <- paste('http://gosjkh.ru', houses_attr, sep = "")
#Последовательно проходим по каждой ссылке из получившегося списка
function_result <- lapply(all_links, function(x) {
page <- read_html(x)
info_text_2 <- page %>% html_nodes('.shadow-effect-2') %>% html_text(trim = T)
##Вывод информации об общей площади и числе домов конкретного города, отраженных в базе
print(info_text_2)
last_page_nod <- page %>% html_nodes("ul")
##В завсмости от того, сколько страниц занимает список домов в городе (одну или больше), сразу скачиваем таблицу,
##или создаем еще один список, где будут содержаться ссылки на все подстраницы
if (length(xml_children(last_page_nod[[length(last_page_nod)]])) < 1) {
city_node <- html_nodes(page, 'body > div.wrapper > div.container.content')
city_node <- xml_find_first(city_node, './/table')
##Здесь задействуется функция 'html_table' из файла 'html_table_advanced'
city_data <- html_table(city_node, header = T, col_classes = list(`1`='integer',
`2`='character',
`3`='character',
`4`='character',
`5`='character',
`6`='character',
`7`='character'))[[1]]
return(city_data)
} else {
last_page <- xml_attrs(xml_child(xml_child(last_page_nod[[length(last_page_nod)]], length(xml_children(last_page_nod[[length(last_page_nod)]]))), 1)) %>%
str_split('=') %>% unlist()
city <- paste(x, "?page=", sep = "")
pages_num <- seq(1,as.numeric(last_page[2]))
city_pages <- paste(city, pages_num, sep = "")
city_data <- lapply(city_pages, . %>%
read_html %>%
html_nodes('body > div.wrapper > div.container.content') %>%
xml_find_first('.//table') %>%
html_table(header = T, col_classes=list(`1`='integer',`2`='character',`3`='character',`4`='character',`5`='character',`6`='character',`7`='character')))
##Объединяем собранные из нескольких подстраниц списки в один датафрейм
city_data <- do.call(bind_rows, city_data)
return(city_data)
}
})
#Объединяем результат выполнения функции в один датафрейм
#и сохраняем его как глобальную переменную для последующего анализа + записываем в xlsx
out <<- as.data.frame(do.call(rbind,function_result))
write.xlsx(out,'Гос ЖКХ.xlsx')
}
gosjkh('https://gosjkh.ru/houses/vologodskaya-oblast')
setwd("C:/Users/User/Desktop/git_rep/My_rep/Combined_app")
shiny::runApp()
runApp()
runApp()
library(openxlsx)
we <- read.xlsx('Книга1.xlsx')
l <- list(names(we))
View(l)
names(we)
colnames(we)
as.list(colnames(we))
l <- as.list(names(we))
names(l) <- names(we)
l
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
we[, '№']
runApp()
runApp()
yandex_geocode <- function(search_line, apikey, ...) {
geo_find <- function(geocode, rspn = 0, coord_left_low, coord_right_up) {
#Combine a complete url for request
geocode <- paste(unlist(strsplit(geocode, split = " ")), collapse = "+")
if (rspn == 1) {
coord1 <- unlist(strsplit(coord_left_low, split = ", "))
coord1 <- paste(coord1[2], coord1[1], sep = ",")
coord2 <- unlist(strsplit(coord_right_up, split = ", "))
coord2 <- paste(coord2[2], coord2[1], sep = ",")
url <- gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", curl_escape(iconv(geocode,"UTF-8")), "&rspn=", rspn, "&bbox=", coord1, "~", coord2, collapse = ""))
} else {
url <- gsub(" ", "", paste('https://geocode-maps.yandex.ru/1.x?apikey=', apikey, "&geocode=", curl_escape(iconv(geocode,"UTF-8")), collapse = ""))
}
result <- as_list(read_xml(url))
result_to_parse <- result$ymaps$GeoObjectCollection$featureMember$GeoObject$metaDataProperty$GeocoderMetaData
found_add <- unlist(lapply(list(result_to_parse$text,
result[["ymaps"]][["GeoObjectCollection"]][["featureMember"]][["GeoObject"]][["Point"]][["pos"]][[1]],
result_to_parse$kind,
result_to_parse$precision,
result_to_parse$AddressDetails$Country$CountryName,
result_to_parse$AddressDetails$Country$AdministrativeArea$AdministrativeAreaName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$LocalityName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$Thoroughfare$ThoroughfareName,
result_to_parse$AddressDetails$Country$AdministrativeArea$Locality$Thoroughfare$Premise$PremiseNumber), function(x) ifelse(is.null(x) == T, NA, x)))
print(found_add)
return(found_add)
}
geocode_result <- lapply(search_line, function(x) tryCatch(geo_find(x),
error = function(e) 'error'))
geocode_result <- as.data.frame(do.call(rbind, geocode_result))
colnames(geocode_result) <- c('AddressLine', 'point',	'kind', 'precision', 'Country', 'AdministrativeAreaName',	'LocalityName',	'ThoroughfareName',	'PremiseNumber')
geocode_result <- cbind(search_line, geocode_result)
return(geocode_result)
}
yandex_geocode(we$Адрес, '2ed244eb-29c9-49fa-8508-80a84c1d69b0')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
